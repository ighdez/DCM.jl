database$CAR_AV[database$SP == 0] = 0
# ################################################################# #
#### DEFINE MODEL PARAMETERS                                     ####
# ################################################################# #
### Vector of parameters, including any that are kept fixed in estimation
apollo_beta=c(asc_train   = 0,
asc_sm   = 0,
asc_car   = 0,
b_tt  = 0,
b_cost    = 0)
### Vector with names (in quotes) of parameters to be kept fixed at their starting value in apollo_beta, use apollo_beta_fixed = c() if none
apollo_fixed = c("asc_sm")
# ################################################################# #
#### GROUP AND VALIDATE INPUTS                                   ####
# ################################################################# #
apollo_inputs = apollo_validateInputs()
# ################################################################# #
#### DEFINE MODEL AND LIKELIHOOD FUNCTION                        ####
# ################################################################# #
apollo_probabilities=function(apollo_beta, apollo_inputs, functionality="estimate"){
### Attach inputs and detach after function exit
apollo_attach(apollo_beta, apollo_inputs)
on.exit(apollo_detach(apollo_beta, apollo_inputs))
### Create list of probabilities P
P = list()
### List of utilities: these must use the same names as in mnl_settings, order is irrelevant
V = list()
V[["train"]]  = asc_train + b_tt * TRAIN_TT + b_cost * TRAIN_CO
V[["sm"]]  = asc_sm + b_tt * SM_TT + b_cost * SM_CO
V[["car"]]  = asc_car + b_tt * CAR_TT + b_cost * CAR_CO
### Define settings for MNL model component
mnl_settings = list(
alternatives  = c(train=1, sm=2, car=3),
avail         = list(train=TRAIN_AV, sm=SM_AV, car=CAR_AV),
choiceVar     = CHOICE,
utilities     = V
)
### Compute probabilities using MNL model
P[["model"]] = apollo_mnl(mnl_settings, functionality)
### Prepare and return outputs of function
P = apollo_prepareProb(P, apollo_inputs, functionality)
return(P)
}
# ################################################################# #
#### MODEL ESTIMATION                                            ####
# ################################################################# #
model = apollo_estimate(apollo_beta, apollo_fixed, apollo_probabilities, apollo_inputs)
apollo_modelOutput(model)
# ################################################################# #
#### LOAD LIBRARY AND DEFINE CORE SETTINGS                       ####
# ################################################################# #
### Clear memory
rm(list = ls())
### Load Apollo library
library(apollo)
### Initialise code
apollo_initialise()
### Set core controls
apollo_control = list(
modelName       = "MNL_swissmetro",
modelDescr      = "Simple MNL model on mode choice RP data",
indivID         = "ID",
outputDirectory = "output",
panelData = FALSE
)
# ################################################################# #
#### LOAD DATA AND APPLY ANY TRANSFORMATIONS                     ####
# ################################################################# #
### Loading data from package
### if data is to be loaded from a file (e.g. called data.csv),
### the code would be: database = read.csv("data.csv",header=TRUE)
database = read.csv('swissmetro.dat',sep='\t')
### for data dictionary, use ?apollo_modeChoiceData
### Use only RP data
database = subset(database,(database$PURPOSE==1|database$PURPOSE==3) & database$CHOICE!=0)
database$TRAIN_TT = database$TRAIN_TT/100
database$TRAIN_CO = database$TRAIN_CO/100
database$CAR_TT = database$CAR_TT/100
database$CAR_CO = database$CAR_CO/100
database$SM_TT = database$SM_TT/100
database$SM_CO = database$SM_CO/100
database$TRAIN_TT[database$GA == 1] = 0
database$SM_CO[database$GA == 1] = 0
database$TRAIN_AV[database$SP == 0] = 0
database$CAR_AV[database$SP == 0] = 0
# ################################################################# #
#### DEFINE MODEL PARAMETERS                                     ####
# ################################################################# #
### Vector of parameters, including any that are kept fixed in estimation
apollo_beta=c(asc_train   = 0,
asc_sm   = 0,
asc_car   = 0,
b_tt  = 0,
b_cost    = 0)
### Vector with names (in quotes) of parameters to be kept fixed at their starting value in apollo_beta, use apollo_beta_fixed = c() if none
apollo_fixed = c("asc_sm")
# ################################################################# #
#### GROUP AND VALIDATE INPUTS                                   ####
# ################################################################# #
apollo_inputs = apollo_validateInputs()
# ################################################################# #
#### DEFINE MODEL AND LIKELIHOOD FUNCTION                        ####
# ################################################################# #
apollo_probabilities=function(apollo_beta, apollo_inputs, functionality="estimate"){
### Attach inputs and detach after function exit
apollo_attach(apollo_beta, apollo_inputs)
on.exit(apollo_detach(apollo_beta, apollo_inputs))
### Create list of probabilities P
P = list()
### List of utilities: these must use the same names as in mnl_settings, order is irrelevant
V = list()
V[["train"]]  = asc_train + b_tt * TRAIN_TT + b_cost * TRAIN_CO
V[["sm"]]  = asc_sm + b_tt * SM_TT + b_cost * SM_CO
V[["car"]]  = asc_car + b_tt * CAR_TT + b_cost * CAR_CO
### Define settings for MNL model component
mnl_settings = list(
alternatives  = c(train=1, sm=2, car=3),
avail         = list(train=TRAIN_AV, sm=SM_AV, car=CAR_AV),
choiceVar     = CHOICE,
utilities     = V
)
### Compute probabilities using MNL model
P[["model"]] = apollo_mnl(mnl_settings, functionality)
### Prepare and return outputs of function
P = apollo_prepareProb(P, apollo_inputs, functionality)
return(P)
}
# ################################################################# #
#### MODEL ESTIMATION                                            ####
# ################################################################# #
model = apollo_estimate(apollo_beta, apollo_fixed, apollo_probabilities, apollo_inputs,estimate_settings=list(estimationRoutine='bfgs'))
# ################################################################# #
#### MODEL OUTPUTS                                               ####
# ################################################################# #
# ----------------------------------------------------------------- #
#---- FORMATTED OUTPUT (TO SCREEN)                               ----
# ----------------------------------------------------------------- #
apollo_modelOutput(model)
model = apollo_estimate(apollo_beta, apollo_fixed, apollo_probabilities, apollo_inputs,estimate_settings=list(estimationRoutine='bfgs',scaleAfterConvergence=FALSE))
# ################################################################# #
#### MODEL OUTPUTS                                               ####
# ################################################################# #
# ----------------------------------------------------------------- #
#---- FORMATTED OUTPUT (TO SCREEN)                               ----
# ----------------------------------------------------------------- #
apollo_modelOutput(model)
model = apollo_estimate(apollo_beta, apollo_fixed, apollo_probabilities, apollo_inputs,estimate_settings=list(estimationRoutine='bfgs',scaleHessian=FALSE))
# ################################################################# #
#### MODEL OUTPUTS                                               ####
# ################################################################# #
# ----------------------------------------------------------------- #
#---- FORMATTED OUTPUT (TO SCREEN)                               ----
# ----------------------------------------------------------------- #
apollo_modelOutput(model)
# ################################################################# #
#### LOAD LIBRARY AND DEFINE CORE SETTINGS                       ####
# ################################################################# #
### Clear memory
rm(list = ls())
### Load Apollo library
library(apollo)
### Initialise code
apollo_initialise()
### Set core controls
apollo_control = list(
modelName       = "MNL_swissmetro",
modelDescr      = "Simple MNL model on mode choice RP data",
indivID         = "ID",
outputDirectory = "output",
panelData = FALSE
)
# ################################################################# #
#### LOAD DATA AND APPLY ANY TRANSFORMATIONS                     ####
# ################################################################# #
### Loading data from package
### if data is to be loaded from a file (e.g. called data.csv),
### the code would be: database = read.csv("data.csv",header=TRUE)
database = read.csv('swissmetro.dat',sep='\t')
### for data dictionary, use ?apollo_modeChoiceData
### Use only RP data
database = subset(database,(database$PURPOSE==1|database$PURPOSE==3) & database$CHOICE!=0)
database$TRAIN_TT = database$TRAIN_TT/100
database$TRAIN_CO = database$TRAIN_CO/100
database$CAR_TT = database$CAR_TT/100
database$CAR_CO = database$CAR_CO/100
database$SM_TT = database$SM_TT/100
database$SM_CO = database$SM_CO/100
database$TRAIN_TT[database$GA == 1] = 0
database$SM_CO[database$GA == 1] = 0
database$TRAIN_AV_SP = database$TRAIN_AV
database$CAR_AV_SP = database$CAR_AV
database$TRAIN_AV_SP[database$SP == 0] = 0
database$CAR_AV_SP[database$SP == 0] = 0
# ################################################################# #
#### DEFINE MODEL PARAMETERS                                     ####
# ################################################################# #
### Vector of parameters, including any that are kept fixed in estimation
apollo_beta=c(asc_train   = 0,
asc_sm   = 0,
asc_car   = 0,
b_tt  = 0,
b_cost    = 0)
### Vector with names (in quotes) of parameters to be kept fixed at their starting value in apollo_beta, use apollo_beta_fixed = c() if none
apollo_fixed = c("asc_sm")
# ################################################################# #
#### GROUP AND VALIDATE INPUTS                                   ####
# ################################################################# #
apollo_inputs = apollo_validateInputs()
# ################################################################# #
#### DEFINE MODEL AND LIKELIHOOD FUNCTION                        ####
# ################################################################# #
apollo_probabilities=function(apollo_beta, apollo_inputs, functionality="estimate"){
### Attach inputs and detach after function exit
apollo_attach(apollo_beta, apollo_inputs)
on.exit(apollo_detach(apollo_beta, apollo_inputs))
### Create list of probabilities P
P = list()
### List of utilities: these must use the same names as in mnl_settings, order is irrelevant
V = list()
V[["train"]]  = asc_train + b_tt * TRAIN_TT + b_cost * TRAIN_CO
V[["sm"]]  = asc_sm + b_tt * SM_TT + b_cost * SM_CO
V[["car"]]  = asc_car + b_tt * CAR_TT + b_cost * CAR_CO
### Define settings for MNL model component
mnl_settings = list(
alternatives  = c(train=1, sm=2, car=3),
avail         = list(train=TRAIN_AV_SP, sm=SM_AV, car=CAR_AV_SP),
choiceVar     = CHOICE,
utilities     = V
)
### Compute probabilities using MNL model
P[["model"]] = apollo_mnl(mnl_settings, functionality)
### Prepare and return outputs of function
P = apollo_prepareProb(P, apollo_inputs, functionality)
return(P)
}
# ################################################################# #
#### MODEL ESTIMATION                                            ####
# ################################################################# #
model = apollo_estimate(apollo_beta, apollo_fixed, apollo_probabilities, apollo_inputs,estimate_settings=list(estimationRoutine='bfgs',scaleHessian=FALSE))
# ################################################################# #
#### LOAD LIBRARY AND DEFINE CORE SETTINGS                       ####
# ################################################################# #
### Clear memory
rm(list = ls())
### Load Apollo library
library(apollo)
### Initialise code
apollo_initialise()
### Set core controls
apollo_control = list(
modelName       = "MNL_swissmetro",
modelDescr      = "Simple MNL model on mode choice RP data",
indivID         = "ID",
outputDirectory = "output",
panelData = FALSE
)
# ################################################################# #
#### LOAD DATA AND APPLY ANY TRANSFORMATIONS                     ####
# ################################################################# #
### Loading data from package
### if data is to be loaded from a file (e.g. called data.csv),
### the code would be: database = read.csv("data.csv",header=TRUE)
database = read.csv('swissmetro.dat',sep='\t')
### for data dictionary, use ?apollo_modeChoiceData
### Use only RP data
database = subset(database,(database$PURPOSE==1|database$PURPOSE==3) & database$CHOICE!=0)
database$TRAIN_TT = database$TRAIN_TT/100
database$TRAIN_CO = database$TRAIN_CO/100
database$CAR_TT = database$CAR_TT/100
database$CAR_CO = database$CAR_CO/100
database$SM_TT = database$SM_TT/100
database$SM_CO = database$SM_CO/100
database$TRAIN_TT[database$GA == 1] = 0
database$SM_CO[database$GA == 1] = 0
database$TRAIN_AV_SP = database$TRAIN_AV
database$CAR_AV_SP = database$CAR_AV
database$TRAIN_AV_SP[database$SP == 0] = 0
database$CAR_AV_SP[database$SP == 0] = 0
# ################################################################# #
#### DEFINE MODEL PARAMETERS                                     ####
# ################################################################# #
### Vector of parameters, including any that are kept fixed in estimation
apollo_beta=c(asc_train   = 0,
asc_sm   = 0,
asc_car   = 0,
b_tt  = 0,
b_cost    = 0)
### Vector with names (in quotes) of parameters to be kept fixed at their starting value in apollo_beta, use apollo_beta_fixed = c() if none
apollo_fixed = c("asc_sm")
# ################################################################# #
#### GROUP AND VALIDATE INPUTS                                   ####
# ################################################################# #
apollo_inputs = apollo_validateInputs()
# ################################################################# #
#### DEFINE MODEL AND LIKELIHOOD FUNCTION                        ####
# ################################################################# #
apollo_probabilities=function(apollo_beta, apollo_inputs, functionality="estimate"){
### Attach inputs and detach after function exit
apollo_attach(apollo_beta, apollo_inputs)
on.exit(apollo_detach(apollo_beta, apollo_inputs))
### Create list of probabilities P
P = list()
### List of utilities: these must use the same names as in mnl_settings, order is irrelevant
V = list()
V[["train"]]  = asc_train + b_tt * TRAIN_TT + b_cost * TRAIN_CO
V[["sm"]]  = asc_sm + b_tt * SM_TT + b_cost * SM_CO
V[["car"]]  = asc_car + b_tt * CAR_TT + b_cost * CAR_CO
### Define settings for MNL model component
mnl_settings = list(
alternatives  = c(train=1, sm=2, car=3),
avail         = list(train=TRAIN_AV_SP, sm=SM_AV, car=CAR_AV_SP),
choiceVar     = CHOICE,
utilities     = V
)
### Compute probabilities using MNL model
P[["model"]] = apollo_mnl(mnl_settings, functionality)
### Prepare and return outputs of function
P = apollo_prepareProb(P, apollo_inputs, functionality)
return(P)
}
# ################################################################# #
#### MODEL ESTIMATION                                            ####
# ################################################################# #
model = apollo_estimate(apollo_beta, apollo_fixed, apollo_probabilities, apollo_inputs,estimate_settings=list(estimationRoutine='bfgs',scaleHessian=FALSE))
# ################################################################# #
#### MODEL OUTPUTS                                               ####
# ################################################################# #
# ----------------------------------------------------------------- #
#---- FORMATTED OUTPUT (TO SCREEN)                               ----
# ----------------------------------------------------------------- #
apollo_modelOutput(model)
model = apollo_estimate(apollo_beta, apollo_fixed, apollo_probabilities, apollo_inputs,estimate_settings=list(estimationRoutine='bfgs',scaleHessian=FALSE,maxLik_settings=list(reltol=1e-8)))
model = apollo_estimate(apollo_beta, apollo_fixed, apollo_probabilities, apollo_inputs,estimate_settings=list(estimationRoutine='bfgs',scaleHessian=FALSE,maxLik_settings=list(reltol=1e-6)))
model = apollo_estimate(apollo_beta, apollo_fixed, apollo_probabilities, apollo_inputs,estimate_settings=list(estimationRoutine='bfgs',scaleHessian=FALSE,maxLik_settings=list(reltol=1e-3)))
model = apollo_estimate(apollo_beta, apollo_fixed, apollo_probabilities, apollo_inputs,estimate_settings=list(estimationRoutine='bfgs',scaleHessian=FALSE,maxLik_settings=list(reltol=1e-8)))
# ################################################################# #
#### LOAD LIBRARY AND DEFINE CORE SETTINGS                       ####
# ################################################################# #
### Clear memory
rm(list = ls())
### Load Apollo library
library(apollo)
### Initialise code
apollo_initialise()
### Set core controls
apollo_control = list(
modelName       = "MNL_swissmetro",
modelDescr      = "Simple MNL model on mode choice RP data",
indivID         = "ID",
outputDirectory = "output",
panelData = FALSE
)
# ################################################################# #
#### LOAD DATA AND APPLY ANY TRANSFORMATIONS                     ####
# ################################################################# #
### Loading data from package
### if data is to be loaded from a file (e.g. called data.csv),
### the code would be: database = read.csv("data.csv",header=TRUE)
database = read.csv('swissmetro.dat',sep='\t')
### for data dictionary, use ?apollo_modeChoiceData
### Use only RP data
database = subset(database,(database$PURPOSE==1|database$PURPOSE==3) & database$CHOICE!=0)
database$TRAIN_TT = database$TRAIN_TT/100
database$TRAIN_CO = database$TRAIN_CO/100
database$CAR_TT = database$CAR_TT/100
database$CAR_CO = database$CAR_CO/100
database$SM_TT = database$SM_TT/100
database$SM_CO = database$SM_CO/100
database$TRAIN_TT[database$GA == 1] = 0
database$SM_CO[database$GA == 1] = 0
database$TRAIN_AV_SP = database$TRAIN_AV
database$CAR_AV_SP = database$CAR_AV
database$TRAIN_AV_SP[database$SP == 0] = 0
database$CAR_AV_SP[database$SP == 0] = 0
# ################################################################# #
#### DEFINE MODEL PARAMETERS                                     ####
# ################################################################# #
### Vector of parameters, including any that are kept fixed in estimation
apollo_beta=c(asc_train   = 0,
asc_sm   = 0,
asc_car   = 0,
b_tt  = 0,
b_cost    = 0)
### Vector with names (in quotes) of parameters to be kept fixed at their starting value in apollo_beta, use apollo_beta_fixed = c() if none
apollo_fixed = c("asc_sm")
# ################################################################# #
#### GROUP AND VALIDATE INPUTS                                   ####
# ################################################################# #
apollo_inputs = apollo_validateInputs()
# ################################################################# #
#### DEFINE MODEL AND LIKELIHOOD FUNCTION                        ####
# ################################################################# #
apollo_probabilities=function(apollo_beta, apollo_inputs, functionality="estimate"){
### Attach inputs and detach after function exit
apollo_attach(apollo_beta, apollo_inputs)
on.exit(apollo_detach(apollo_beta, apollo_inputs))
### Create list of probabilities P
P = list()
### List of utilities: these must use the same names as in mnl_settings, order is irrelevant
V = list()
V[["train"]]  = asc_train + b_tt * TRAIN_TT + b_cost * TRAIN_CO
V[["sm"]]  = asc_sm + b_tt * SM_TT + b_cost * SM_CO
V[["car"]]  = asc_car + b_tt * CAR_TT + b_cost * CAR_CO
### Define settings for MNL model component
mnl_settings = list(
alternatives  = c(train=1, sm=2, car=3),
avail         = list(train=TRAIN_AV_SP, sm=SM_AV, car=CAR_AV_SP),
choiceVar     = CHOICE,
utilities     = V
)
### Compute probabilities using MNL model
P[["model"]] = apollo_mnl(mnl_settings, functionality)
### Prepare and return outputs of function
P = apollo_prepareProb(P, apollo_inputs, functionality)
return(P)
}
# ################################################################# #
#### MODEL ESTIMATION                                            ####
# ################################################################# #
model = apollo_estimate(apollo_beta, apollo_fixed, apollo_probabilities, apollo_inputs)
View(database)
View(database)
# ################################################################# #
#### LOAD LIBRARY AND DEFINE CORE SETTINGS                       ####
# ################################################################# #
### Clear memory
rm(list = ls())
### Load Apollo library
library(apollo)
### Initialise code
apollo_initialise()
### Set core controls
apollo_control = list(
modelName       = "MNL_swissmetro",
modelDescr      = "Simple MNL model on mode choice RP data",
indivID         = "ID",
outputDirectory = "output",
panelData = FALSE
)
# ################################################################# #
#### LOAD DATA AND APPLY ANY TRANSFORMATIONS                     ####
# ################################################################# #
### Loading data from package
### if data is to be loaded from a file (e.g. called data.csv),
### the code would be: database = read.csv("data.csv",header=TRUE)
database = read.csv('swissmetro.dat',sep='\t')
### for data dictionary, use ?apollo_modeChoiceData
### Use only RP data
database = subset(database,(database$PURPOSE==1|database$PURPOSE==3) & database$CHOICE!=0)
database$TRAIN_TT = database$TRAIN_TT/100
database$TRAIN_CO = database$TRAIN_CO/100
database$CAR_TT = database$CAR_TT/100
database$CAR_CO = database$CAR_CO/100
database$SM_TT = database$SM_TT/100
database$SM_CO = database$SM_CO/100
database$TRAIN_CO[database$GA == 1] = 0
database$SM_CO[database$GA == 1] = 0
database$TRAIN_AV_SP = database$TRAIN_AV
database$CAR_AV_SP = database$CAR_AV
database$TRAIN_AV_SP[database$SP == 0] = 0
database$CAR_AV_SP[database$SP == 0] = 0
# ################################################################# #
#### DEFINE MODEL PARAMETERS                                     ####
# ################################################################# #
### Vector of parameters, including any that are kept fixed in estimation
apollo_beta=c(asc_train   = 0,
asc_sm   = 0,
asc_car   = 0,
b_tt  = 0,
b_cost    = 0)
### Vector with names (in quotes) of parameters to be kept fixed at their starting value in apollo_beta, use apollo_beta_fixed = c() if none
apollo_fixed = c("asc_sm")
# ################################################################# #
#### GROUP AND VALIDATE INPUTS                                   ####
# ################################################################# #
apollo_inputs = apollo_validateInputs()
# ################################################################# #
#### DEFINE MODEL AND LIKELIHOOD FUNCTION                        ####
# ################################################################# #
apollo_probabilities=function(apollo_beta, apollo_inputs, functionality="estimate"){
### Attach inputs and detach after function exit
apollo_attach(apollo_beta, apollo_inputs)
on.exit(apollo_detach(apollo_beta, apollo_inputs))
### Create list of probabilities P
P = list()
### List of utilities: these must use the same names as in mnl_settings, order is irrelevant
V = list()
V[["train"]]  = asc_train + b_tt * TRAIN_TT + b_cost * TRAIN_CO
V[["sm"]]  = asc_sm + b_tt * SM_TT + b_cost * SM_CO
V[["car"]]  = asc_car + b_tt * CAR_TT + b_cost * CAR_CO
### Define settings for MNL model component
mnl_settings = list(
alternatives  = c(train=1, sm=2, car=3),
avail         = list(train=TRAIN_AV_SP, sm=SM_AV, car=CAR_AV_SP),
choiceVar     = CHOICE,
utilities     = V
)
### Compute probabilities using MNL model
P[["model"]] = apollo_mnl(mnl_settings, functionality)
### Prepare and return outputs of function
P = apollo_prepareProb(P, apollo_inputs, functionality)
return(P)
}
# ################################################################# #
#### MODEL ESTIMATION                                            ####
# ################################################################# #
model = apollo_estimate(apollo_beta, apollo_fixed, apollo_probabilities, apollo_inputs)
help("apollo_deltaMethod")
deltaMethod_settings=list(expression=c(VTT="b_tt/b_cost"),varcov='classical')
apollo_deltaMethod(model, deltaMethod_settings)
deltaMethod_settings=list(expression=c(VTT="b_tt/b_cost"))
apollo_deltaMethod(model, deltaMethod_settings)
